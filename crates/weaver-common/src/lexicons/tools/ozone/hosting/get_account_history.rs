// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `tools.ozone.hosting.getAccountHistory` namespace.
pub const NSID: &str = "tools.ozone.hosting.getAccountHistory";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub did: atrium_api::types::string::Did,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub events: core::option::Option<Vec<String>>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub limit: core::option::Option<atrium_api::types::LimitedNonZeroU8<100u8>>,
}
pub type Parameters = atrium_api::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub events: Vec<Event>,
}
pub type Output = atrium_api::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct AccountCreatedData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub email: core::option::Option<String>,
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub handle: core::option::Option<atrium_api::types::string::Handle>,
}
pub type AccountCreated = atrium_api::types::Object<AccountCreatedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct EmailConfirmedData {
    pub email: String,
}
pub type EmailConfirmed = atrium_api::types::Object<EmailConfirmedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct EmailUpdatedData {
    pub email: String,
}
pub type EmailUpdated = atrium_api::types::Object<EmailUpdatedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct EventData {
    pub created_at: atrium_api::types::string::Datetime,
    pub created_by: String,
    pub details: atrium_api::types::Union<EventDetailsRefs>,
}
pub type Event = atrium_api::types::Object<EventData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct HandleUpdatedData {
    pub handle: atrium_api::types::string::Handle,
}
pub type HandleUpdated = atrium_api::types::Object<HandleUpdatedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct PasswordUpdatedData {}
pub type PasswordUpdated = atrium_api::types::Object<PasswordUpdatedData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "$type")]
pub enum EventDetailsRefs {
    #[serde(rename = "tools.ozone.hosting.getAccountHistory#accountCreated")]
    AccountCreated(Box<AccountCreated>),
    #[serde(rename = "tools.ozone.hosting.getAccountHistory#emailUpdated")]
    EmailUpdated(Box<EmailUpdated>),
    #[serde(rename = "tools.ozone.hosting.getAccountHistory#emailConfirmed")]
    EmailConfirmed(Box<EmailConfirmed>),
    #[serde(rename = "tools.ozone.hosting.getAccountHistory#passwordUpdated")]
    PasswordUpdated(Box<PasswordUpdated>),
    #[serde(rename = "tools.ozone.hosting.getAccountHistory#handleUpdated")]
    HandleUpdated(Box<HandleUpdated>),
}
