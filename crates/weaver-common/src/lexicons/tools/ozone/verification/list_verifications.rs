// @generated - This file is generated by esquema-codegen (forked from atrium-codegen). DO NOT EDIT.
//!Definitions for the `tools.ozone.verification.listVerifications` namespace.
pub const NSID: &str = "tools.ozone.verification.listVerifications";
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct ParametersData {
    ///Filter to verifications created after this timestamp
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub created_after: core::option::Option<atrium_api::types::string::Datetime>,
    ///Filter to verifications created before this timestamp
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub created_before: core::option::Option<atrium_api::types::string::Datetime>,
    ///Pagination cursor
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    ///Filter to verifications that are revoked or not. By default, includes both.
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub is_revoked: core::option::Option<bool>,
    ///Filter to verifications from specific issuers
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub issuers: core::option::Option<Vec<atrium_api::types::string::Did>>,
    ///Maximum number of results to return
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub limit: core::option::Option<atrium_api::types::LimitedNonZeroU8<100u8>>,
    ///Sort direction for creation date
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub sort_direction: core::option::Option<String>,
    ///Filter to specific verified DIDs
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub subjects: core::option::Option<Vec<atrium_api::types::string::Did>>,
}
pub type Parameters = atrium_api::types::Object<ParametersData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(rename_all = "camelCase")]
pub struct OutputData {
    #[serde(skip_serializing_if = "core::option::Option::is_none")]
    pub cursor: core::option::Option<String>,
    pub verifications: Vec<crate::tools::ozone::verification::defs::VerificationView>,
}
pub type Output = atrium_api::types::Object<OutputData>;
#[derive(serde::Serialize, serde::Deserialize, Debug, Clone, PartialEq, Eq)]
#[serde(tag = "error", content = "message")]
pub enum Error {}
impl std::fmt::Display for Error {
    fn fmt(&self, _f: &mut std::fmt::Formatter) -> std::fmt::Result {
        Ok(())
    }
}
